#!/bin/bash 
#
# checkers - checks the availability of websites and APIs, providing 
# notifications via OSD and voice 
#
# For OS X and Linux (coming soon)
#
# For full details and usage see the accompanying README file or 
# visit https://github.com/philcryer/checkers
#
# Distributed under the terms of the BSD License.
# Copyright (c) 2011 Phil Cryer phil.cryer@gmail.com
# See the accompanying LICENSE file for full details
#

# define website URLs to check here, seperated by a space
#ARRAY=( this_random_site.com www.eol.org www.ubio.org www.mbl.edu bibapp.mbl.edu www.lifeviz.org )
ARRAY=( www.slashdot.org this_random_site.com google.com )

# display a completed message after each run (1=on, 0=off) 
COMPLETED_MESSAGE="1"

# define PATH for script
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# are we running on Linux or OS X?
function oscheck {
	OS='unknown'
	DETECT=`uname`
	if [[ "$DETECT" == 'Linux' ]]; then
		OS='linux'
	elif [[ "$DETECT" == 'Darwin' ]]; then
		OS='osx'
	fi

	#if [[ $OS == 'linux' ]]; then
	#elif [[ $OS == 'osx' ]]; then
	#fi
	echo $OS
}
oscheck

# define log file
LOG="/tmp/checkers.log"

# ensure internet connection and DNS resolution are availble, halt if not
if eval "ping -c 1 www.google.com > /dev/null"; then
	touch ${LOG}
else
	echo "`date +%T\ %Y/%m/%d` no internet available" >> ${LOG}
	exit 1
fi

# define a URL to a success and error icon you like
SUCCESS_ICON="http://www.gettyicons.com/free-icons/123/onebit-2/png/48/tick_48.png"
ERROR_ICON="http://www.gettyicons.com/free-icons/123/onebit-2/png/48/stop_48.png"

if [ ! -f '/tmp/error_icon.png' ]; then
	curl -s -o /tmp/error_icon.png ${ERROR_ICON}
fi
if [ ! -f '/tmp/success_icon.png' ]; then
	curl -s -o /tmp/success_icon.png ${SUCCESS_ICON}
fi

ELEMENTS=${#ARRAY[@]}

# run the loop, testing all URLs listed in ARRAY
for (( i=0;i<$ELEMENTS;i++)); do
	RESPONSE=$(curl --connect-timeout 5 --write-out %{http_code} --silent --output /dev/null http://${ARRAY[${i}]})

	if [ ${RESPONSE} != "200" ] && [ ${RESPONSE} != "301" ]; then
		DATE=`date +%T\ %Y/%m/%d`
		MESSAGE="${ARRAY[${i}]} is DOWN"
		if [[ ${OS} == 'osx' ]]; then
			growlnotify -s --image /tmp/error_icon.png -t "${MESSAGE}" -m "${DATE}" & 
			say -v Alex "ALERT: ${MESSAGE}" &
		elif [[ ${OS} == 'linux' ]]; then
			notify-send "${MESSAGE}" "${DATE}" -i /tmp/error_icon.png -t 100000 -u critical &
			#espeak
		fi
		echo "${DATE} ${MESSAGE}" >> ${LOG}
	fi

done

# example API check, define API_URL and API_STRING to run your own
#API_URL="www.ubio.org/webservices/service.php?function=taxonFinder&includeLinks=0&freeText=Cantharellus"
API_STRING="238542"
if [ ${API_URL} ]; then 
	RESPONSE=$(curl --connect-timeout 5 --silent --output /tmp/out ${API_URL}) 
	CHECK=`cat /tmp/out | grep ${API_STRING}`

	if [ ! ${CHECK} ]; then
		DATE=`date +%T\ %Y/%m/%d`
		MESSAGE="Taxonfinder is DOWN"
		if [[ ${OS} == 'osx' ]]; then
			growlnotify -s --image /tmp/error_icon.png -t "${MESSAGE}" -m "${DATE}" & 
			say -v Alex "ALERT: ${MESSAGE}" &
		elif [[ ${OS} == 'linux' ]]; then
			notify-send "${MESSAGE}" "${DATE}" -i /tmp/error_icon.png -t 100000 &
			#espeak
		fi
		echo "${DATE} ${MESSAGE}" >> ${LOG}
	fi 
fi

# display a successful growl message when complete, if END_MESSAGE="1"
if [ ${COMPLETED_MESSAGE} == "1" ]; then
	DATE=`date +%T\ %Y/%m/%d`
	MESSAGE="Checkers run complete"
		if [[ ${OS} == 'osx' ]]; then
			growlnotify -s --image /tmp/success_icon.png -t "${MESSAGE}" -m "${DATE}" & 
		elif [[ ${OS} == 'linux' ]]; then
			notify-send "${MESSAGE}" "${DATE}" -i /tmp/success_icon.png -t 5000 &
			#espeak
		fi
fi
exit 0
